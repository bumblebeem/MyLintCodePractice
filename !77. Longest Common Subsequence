public class Solution {
    /**
     * @param A, B: Two strings.
     * @return: The length of longest common subsequence of A and B.
     */
    public int longestCommonSubsequence(String A, String B) {
        if(A == null || A.length() == 0 || B == null || B.length() == 0){
            return 0;
        }
        int lenA = A.length();
        int lenB = B.length();
        int[][] dp = new int[lenA + 1][lenB + 1];
        // for(int i = 0; i < A.length(); i ++){
        //     dp[i][0] = 0;
        // }
        // for(int i = 0; i < B.length(); i ++){
        //     dp[0][i] = 0;
        // }
        for(int i = 1; i <= lenA; i ++){
            for(int j = 1; j <= lenB; j ++){
                if(A.charAt(i - 1) == B.charAt(j - 1)){
                    dp[i][j] = Math.max(dp[i - 1][j - 1] + 1, Math.max(dp[i - 1][j], dp[i][j - 1]));
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[lenA][lenB];
    }
}


//1. 还是需要特别注意数组下标
//2. dp[i][j]含义是A的前i个字符和B的前j个字符所能组成的longest common subsequence的长度
