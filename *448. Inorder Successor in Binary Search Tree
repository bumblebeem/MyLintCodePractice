// 法一
// Great solution for both inorder successor and predecessor:
// https://discuss.leetcode.com/topic/25076/share-my-java-recursive-solution

// 法二
// Cracking the Coding Interview P248的4.6也是这道题，但是有指向parent的指针，所以更简单一些
// 即使没有指向parent的指针，可以用如下方法实现
// 1) If right subtree of node is not NULL, then succ lies in right subtree. Do following.
// Go to right subtree and return the node with minimum key value in right subtree.
// 2)* If right sbtree of node is NULL, then start from root and use search like technique. Do following.
// Travel down the tree, if a node’s data is greater than root’s data then go right side, otherwise go to left side.
// Great explaination in following link:
// http://www.geeksforgeeks.org/inorder-successor-in-binary-search-tree/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        if(root == null){
            return null;
        }
        
        if(p.right != null){
            return findLeftmostChild(p.right);
        }
        
        TreeNode successor = null;
        while(root != null){
            if(root.val < p.val){
                root = root.right;
            } else if(root.val > p.val){
                successor = root;
                root = root.left;
            } else {
                break;
            }
        }
        return successor;
    }
    
    private TreeNode findLeftmostChild(TreeNode node){
        if(node.left != null){
            node = node.left;
        }
        return node;
    }
}
