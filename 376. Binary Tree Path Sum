/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root the root of binary tree
     * @param target an integer
     * @return all valid paths
     */
    public List<List<Integer>> binaryTreePathSum(TreeNode root, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> cur = new ArrayList<Integer>();
        if(root != null){
            cur.add(root.val);
            dfs(res, cur, target - root.val, root);
        }
        return res;
    }
    
    private void dfs(List<List<Integer>> res, List<Integer> cur, int target, TreeNode node){
        if(node.left == null && node.right == null){
            if(target == 0){
                res.add(new ArrayList<Integer>(cur));
            }
            return;
        }
        if(node.left != null){
            cur.add(node.left.val);
            dfs(res, cur, target - node.left.val, node.left);
            cur.remove(cur.size() - 1);
        }
        if(node.right != null){
            cur.add(node.right.val);
            dfs(res, cur, target - node.right.val, node.right);
            cur.remove(cur.size() - 1);
        }
    }
}
