class Stack {
    Queue<Integer> q1;
    Queue<Integer> q2;
    
    Stack(){
        q1 = new LinkedList<Integer>();
        q2 = new LinkedList<Integer>();
    }
    
    // Push a new item into the stack
    public void push(int x) {
        q1.add(x);
    }

    // Pop the top of the stack
    public void pop() {
        while(!q1.isEmpty()){
            int size = q1.size();
            for(int i = 0; i < size - 1; i ++){
                q2.add(q1.poll());
            }
            q1.poll();
        }
        while(!q2.isEmpty()){
            q1.add(q2.poll());
        }
    }

    // Return the top of the stack
    public int top() {
        int top = 0;
        while(!q1.isEmpty()){
            int size = q1.size();
            for(int i = 0; i < size - 1; i ++){
                q2.add(q1.poll());
            }
            top = q1.poll();
            q2.add(top);
        }
        while(!q2.isEmpty()){
            q1.add(q2.poll());
        }
        return top;
    }

    // Check the stack is empty or not.
    public boolean isEmpty() {
        return q1.isEmpty();
    }    
}


// a more concise solution, by using a function to swap two queues
// http://www.jiuzhang.com/solutions/implement-stack-by-two-queues/
