/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
// Solution one:
public class Solution {
    /**
     * @param T1, T2: The roots of binary tree.
     * @return: True if T2 is a subtree of T1, or false.
     */
    public boolean isSubtree(TreeNode T1, TreeNode T2) {
        StringBuilder sb1 = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        
        getPreorder(T1, sb1);
        getPreorder(T2, sb2);
        
        return sb1.toString().contains(sb2.toString());
    }
    
    private void getPreorder(TreeNode root, StringBuilder sb){
        if(root == null){
            sb.append("N");
            return;
        }
        sb.append(root.val);
        getPreorder(root.left, sb);
        getPreorder(root.right, sb);
    }
}


// Solution two:(这种方法理解的不好。。)
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param T1, T2: The roots of binary tree.
     * @return: True if T2 is a subtree of T1, or false.
     */
    public boolean isSubtree(TreeNode T1, TreeNode T2) {
        if(T2 == null){
            return true;
        }
        return subtree(T1, T2);
    }
    
    private boolean subtree(TreeNode T1, TreeNode T2){
        if(T1 == null){
            return false;
        } else if(T1.val == T2.val && matchTree(T1, T2)){
            return true;
        }
        return subtree(T1.left, T2) || subtree(T1.right, T2);
    }
    
    private boolean matchTree(TreeNode T1, TreeNode T2){
        if(T1 == null && T2 == null){
            return true;
        } else if(T1 == null || T2 == null){
            return false;
        } else if(T1.val != T2.val){
            return false;
        } else {
            return matchTree(T1.left, T2.left) && matchTree(T1.right, T2.right);
        }
    }
}


// Cracking the Coding Interview P266 - 267
