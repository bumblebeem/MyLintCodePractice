/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param T1, T2: The roots of binary tree.
     * @return: True if T2 is a subtree of T1, or false.
     */
    public boolean isSubtree(TreeNode T1, TreeNode T2) {
        StringBuilder sb1 = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        
        getPreorder(T1, sb1);
        getPreorder(T2, sb2);
        
        return sb1.toString().contains(sb2.toString());
    }
    
    private void getPreorder(TreeNode root, StringBuilder sb){
        if(root == null){
            sb.append("N");
            return;
        }
        sb.append(root.val);
        getPreorder(root.left, sb);
        getPreorder(root.right, sb);
    }
}

// Cracking the Coding Interview P266


// Another recursive solution:
// http://www.jiuzhang.com/solutions/subtree/
