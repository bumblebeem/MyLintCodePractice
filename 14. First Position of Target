class Solution {
    /**
     * @param nums: The integer array.
     * @param target: Target to find.
     * @return: The first position of target. Position starts from 0.
     */
    public int binarySearch(int[] nums, int target) {
        //write your code here
        if(nums == null || nums.length == 0){
            return -1;
        }
        int start = 0, end = nums.length - 1;
        while(start + 1 < end){
            int middle = (end - start) / 2 + start;
            if(nums[middle] >= target){
                end = middle;
            } else {
                start = middle;
            }
        }
        if(nums[start] == target){
            return start;
        }else if(nums[end] == target){
            return end;
        }
        return -1;
    }
}

// 注意15行，以及21和23的顺序不能颠倒。因为是求first position


// http://www.jiuzhang.com/solutions/first-position-of-target/


// 再刷一次AC
public int binarySearch(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        while(left + 1 < right){
            int mid = (right - left) / 2 + left;
            if(nums[mid] > target){
                right = mid;
            } else if(nums[mid] < target){
                left = mid;
            } else {
                right = mid;
            }
        }
        if(nums[left] == target){
            return left;
        } else if(nums[right] == target){
            return right;
        }
        return -1;
    }
