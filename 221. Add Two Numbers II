/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;      
 *     }
 * }
 */
public class Solution {
    /**
     * @param l1: the first list
     * @param l2: the second list
     * @return: the sum list of l1 and l2 
     */
    public ListNode addLists2(ListNode l1, ListNode l2) {
        if(l1 == null){
            return l2;
        }
        if(l2 == null){
            return l1;
        }
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        
        int carry = 0;
        ListNode cur1 = l1;
        ListNode cur2 = l2;
        ListNode dummy = new ListNode(0);
        ListNode preHead = dummy;
        while(cur1 != null && cur2 != null){
            int sum = cur1.val + cur2.val + carry;
            carry = sum / 10;
            dummy.next = new ListNode(sum % 10);
            dummy = dummy.next;
            cur1 = cur1.next;
            cur2 = cur2.next;
        }
        while(cur1 != null){
            int sum = cur1.val + carry;
            carry = sum / 10;
            dummy.next = new ListNode(sum % 10);
            dummy = dummy.next;
            cur1 = cur1.next;
        }
        while(cur2 != null){
            int sum = cur2.val + carry;
            carry = sum / 10;
            dummy.next = new ListNode(sum % 10);
            dummy = dummy.next;
            cur2 = cur2.next;
        }
        if(carry == 1){
            dummy.next = new ListNode(1);
        }
        
        return reverseList(preHead.next);
    }  
    
    private ListNode reverseList(ListNode head){
        ListNode prev = null;
        ListNode cur = head;
        while(cur != null){
            ListNode temp = cur.next;
            cur.next = prev;
            prev = cur;
            cur = temp;
        }
        return prev;
    }
}


// 跟合并两个链表的题目十分相似，几乎如出一辙（只不过多了个reverse）
// 忘记了55-57行（即最后一次进位的处理），看了错误的case才加上去，否则就一次AC了啊。。呵呵
