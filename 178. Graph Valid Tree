public class Solution {
    /**
     * @param n an integer
     * @param edges a list of undirected edges
     * @return true if it's a valid tree, or false
     */
    public boolean validTree(int n, int[][] edges) {
        // tree should have n nodes with n-1 edges
        if(n - 1 != edges.length){
            return false;
        }
        
        UnionFind uf = new UnionFind(n);
        
        for(int i = 0; i < edges.length; i ++){
            if(uf.find(edges[i][0]) == uf.find(edges[i][1])){
                return false;
            }
            uf.union(edges[i][0], edges[i][1]);
        }
        return true;
    }
}

class UnionFind {
    HashMap<Integer, Integer> father = new HashMap<Integer, Integer>();
    
    UnionFind(int n){
        for(int i = 0; i < n; i ++){
            father.put(i, i);
        }
    }
    
    int find(int x){
        int parent = father.get(x);
        while(parent != father.get(parent)){
            parent = father.get(parent);
        }
        return parent;
    }
    
    void union(int x, int y){
        int father_x = find(x);
        int father_y = find(y);
        if(father_x != father_y){
            father.put(father_x, father_y);
        }
    }
}
