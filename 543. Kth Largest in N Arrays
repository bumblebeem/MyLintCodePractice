class Node{
    public int value, from_id, index;
    public Node(int v, int id, int i){
        this.value = v;
        this.from_id = id;
        this.index = i;
    }
}

public class Solution {
    /**
     * @param arrays a list of array
     * @param k an integer
     * @return an integer, K-th largest element in N arrays
     */
    public int KthInArrays(int[][] arrays, int k) {
        Queue<Node> maxHeap = new PriorityQueue<Node>(k, new Comparator<Node>(){
            public int compare(Node a, Node b){
                return b.value - a.value;
            }
        });
        
        //sort every array, and put the largest element
        //in each sorted array into maxHeap
        for(int i = 0; i < arrays.length; i ++){
            Arrays.sort(arrays[i]);
            
            if(arrays[i].length > 0){
                int from_id = i;
                int index = arrays[i].length - 1;
                int value = arrays[i][index];
                maxHeap.add(new Node(value, from_id, index));
            }
        }
        
        for(int i = 0; i < k; i ++){
            Node cur = maxHeap.poll();
            int value = cur.value;
            int from_id = cur.from_id;
            int index = cur.index;
            
            if(i == k - 1){
                return value;
            }
            
            if(index > 0){
                index --;
                value = arrays[from_id][index];
                maxHeap.add(new Node(value, from_id, index));
            }
        }
        
        return -1;
    }
}
