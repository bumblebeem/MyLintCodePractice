/**
 * Definition for Undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { 
 *         label = x;
 *         neighbors = new ArrayList<UndirectedGraphNode>(); 
 *     }
 * };
 */
public class Solution {
    /**
     * @param graph a list of Undirected graph node
     * @param s, t two Undirected graph nodes
     * @return an integer
     */
    public int sixDegrees(List<UndirectedGraphNode> graph,
                          UndirectedGraphNode s,
                          UndirectedGraphNode t) {
        if(s == t){
            return 0;
        }
        Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();
        HashSet<UndirectedGraphNode> visited = new HashSet<UndirectedGraphNode>();
        
        queue.add(s);
        visited.add(s);
        int level = 1;
        while(!queue.isEmpty()){
            int levelSize = queue.size();
            for(int i = 0; i < levelSize; i ++){
                List<UndirectedGraphNode> neighbors = queue.poll().neighbors;
                for(UndirectedGraphNode n : neighbors){
                    if(n == t){
                        return level;
                    }
                    if(!visited.contains(n)){
                        queue.add(n);
                        visited.add(n);
                    }
                }
            }
            level ++;
        }
        return -1;
    }
}


// 这道题的标签是Microsoft啊，有点假。。

// 和下边这个链接的做法不一样，它为什么要用HashMap不用HashSet呢
// https://aaronice.gitbooks.io/lintcode/content/graph_search/six_degrees.html
