/**
 * Definition of Interval:
 * public classs Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 */
class Point{
    int time;
    int type;   // 0 for taking off, 1 for landing，可以随意指定值
    
    Point(int time, int type){
        this.time = time;
        this.type = type;   
    }
}

class Solution {
    /**
     * @param intervals: An interval array
     * @return: Count of airplanes are in the sky.
     */
    public int countOfAirplanes(List<Interval> airplanes) { 
        List<Point> points = new ArrayList<Point>();
        for(int i = 0; i < airplanes.size(); i ++){
            points.add(new Point(airplanes.get(i).start, 0));
            points.add(new Point(airplanes.get(i).end, 1));
        }
        
        Collections.sort(points, new Comparator<Point>(){
            public int compare(Point a, Point b){
                if(a.time != b.time){
                    return a.time - b.time;
                } else {
                    return b.type - a.type;     // 因为题目中说taking off和landing时间重合的话，先landing，所以这样排序
                }
            }
        });
        
        int max = 0;
        int count = 0;
        for(int i = 0; i < points.size(); i ++){
            if(points.get(i).type == 0){
                count ++;
                max = Math.max(count, max);
            }
            if(points.get(i).type == 1){
                count --;
            }
        }
        return max;
    }
}
