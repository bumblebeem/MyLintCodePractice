public class Solution {
    /**
     * @param A, B: Two string.
     * @return: the length of the longest common substring.
     */
    public int longestCommonSubstring(String A, String B) {
        if(A == null || A.length() == 0 || B == null || B.length() == 0){
            return 0;
        }
        int len1 = A.length();
        int len2 = B.length();
        int max = 0;
        int[][] dp = new int[len1 + 1][len2 + 1];
        for(int i = 1; i <= len1; i ++){
            for(int j = 1; j <= len2; j ++){
                if(A.charAt(i - 1) == B.charAt(j - 1)){
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = 0;
                }
                max = Math.max(dp[i][j], max);
            }
        }
        return max;
    }
}


//dp[i][j]的含义是A的前i个字符和B的前j个字符所能组成的最长的LCS的长度
